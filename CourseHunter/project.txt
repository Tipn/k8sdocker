без базы данных 
приложение которое сжимает изображение
Фронт написаный на react 
на локальном домене convert.local вход через браузер через https 
поднят класстер из 5 серверов содержит кластер swarm состоит из:
                        - nginx     - Reverse proxy 
                            завсит щт url   - приложение на React
                             - api upload (NestJS)
                             - app (react)
                        - RMQ       - шина сообщения 
                        - Converter x10 
                        
первый этап в рукопашную устанавливаю ubuntu на virtualBox без автоматизации скачав обрас с сайта...
                     
 ssh alari@127.0.0.1 -p 2222 -пробросить порты
                    
cat ~/.ssh/id_ed25519.pub -получить публичный ключ  своей машины 

на сервере убунты 
создаем папку .ssh в ней с помощью nano создаем authorized_keys и вставляю туда свой публичный ключ   

Установка Docker: 
https://docs.docker.com/engine/install/ubuntu/

$ sudo apt-get update

$ sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

$ echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

$ sudo apt-get install docker-ce docker-ce-cli containerd.io

$ sudo groupadd docker

$ sudo usermod -aG docker $USER добавляем пользвателя 

https://github.com/AlariCode?tab=repositories&q=docker_demo&type=&language=&sort= 

из чего состоит проэкт
https://github.com/AlariCode/docker-demo

собираю image 

docker build -f ./apps/api/Dockerfile -t test:latest .
сборка image -f путь к докерфайлу -t teg файла .          все что есть в контексте 

19 lesson
анализируем image

  https://github.com/wagoodman/dive устанавливаем утилиту для анализа 
  запуск dive test:latest

docker run --name api2 -d test:latest

21 lesson сборка go проекта 
https://github.com/AlariCode/docker-demo-2.git
    # демо курса по Docker 2
    - сборка на golang:alpine
    - запуск на sceratch из собранного bin

    Сборка следующей командой:
    '''bash
    CGO_ENABLE=0 GOOS=linux GOARCH=amd64 go build
    '''


docker build -t go-api:latest .

22 lesson устройство сети в Docker

  Что реализует сети?
    Network namespaces
    Linux Bridge
    Virtual Ethernet Devices
    IP Tables

контейнер <-> [veth] <-> [bridge] <-> eth 192.168.0...

Типы сетивых драйверов driver Dockeer
    brifge    Изолированная сеть между конейнерами 
    host      Удаление изоляции контейнера
    overlay   Dockerswarm
    macvlan   Уникальный MAC адрес для контейнера
    null      Без сети 
команды управления сетями comands:
      connect     подключение контейнера к сети
      create      создать сеть
      disconect   отключить от сети
      inspectls   Параетры сети
      ls
      prune
      rm

docker network ls     покажет список и ID сетей Docker 
  BRIDGE cети 
      [контейнер1]  [контейнер2] [контейнер3]

port Mapping 

git clone https://github.com/AlariCode/docker-demo-3.git

  docker build -t demo3:latest .

docker images показывает мои image 

docker run --name=node-1 -d demo3:latest
docker run --name=node-2 -d demo3:latest
docker network ls
docker inspect bridge     
docker ps
docker exec -it node-1 sh       вход в контейнер node-1
        curl (ip node-2)172.17.0.3:3000
        exit
docker exec -it node-2 sh       в контейнер node-2          контейнеры видят друг друга 
        curl 172.17.0.2:3000
        curl node-1:3000        неработает 
        
docker network create my-network
docker network connect my-network node-1
docker network connect my-network node-2
docker network inspect my-network 
docker exec -it node-2 sh 
      curl node-1:3000        теперь работает 

docker run --name=node-3 --network my-network -d demo3:latest
docker network inspect bridge         
curl localhost:3000         не сможет подключиться 
docker run --name=node-4 -p3000:3000 --network my-network -d demo3:latest 
curl localhost:3000         пробросить порт наружу 

              24 lesson Host & null 

 docker run --name node-5 -d --network host demo3

docker network inspect host

curl 127.0.0.1:3000
docker run --name node-6 -d --network none demo3          так поднимется контейнер без доступа к сети 
                       
                       25урок  DNS

docker run --name node-8 -d --dns 8.8.8.8 demo3         запуск контейнера с заданым DNS 

                      26 урок Устройство и типы volumes
          Volumes могут храниться
          - bind mounts
          - volumes -> область Docker
          - tmpfs -> memory

    Зачем нужны volume
    - Персистентное хранение данных (чтоб данные сохранялись в не зависимости от жизни логов)
    - Экспортирование логов
    - Передача конфигов в контейнер 
    - share данных между контейнерами (два контейнера шерят volume)


                  27 использование volumes 
https://github.com/AlariCode/docker-demo-4.git

docker build -t demo4:latest .
docker volume ls
docker volume prune
docker volume create demo
docker volume inspect demo
sudo ls /var/lib/docker/volumes/demo

docker run --name volume-1 -d -v demo:/opt/app/data demo4:latest 
docker rm [name] -f
docker run --name volume-1 -d -v demo:/opt/app/data -p 3000:3000 demo4:latest 

curl "127.0.0.1:3000/set?id=1234
docker run --name volume-2 -d -v demo:/opt/app/data -p 3001:3000 demo4:latest
curl "127.0.0.1:3001/get"

docker rm [volume-1] -f 
docker rm [volume-2] -f 
docker ps -a
sudo cat /var/lib/docker/volumes/demo/_data/req
docker volume rm demo

                28 Volume в Dockerfile

изминения в Dockerfile добавил строчку Volume 

    Docker build -t 
    docker run --name volume-3 -d -p 3000:3000 demo4-1
    docker volume ls
    curl "127.0.0.1:3000/set?id=123"
    docker inspect volumeNAME

              29 использование bind mounts

            docker run --name volume-5 -d -p 3000:3000 -v /home/alari/data:/opt/app/data  demo4-1   
            вместо биндинга volume которы хранился бы в docker, указал конкретный каталог /home/alari/data: где сохраняются данные из контейнера /opt/app/data 
            появится папка data на уровень выше 
            используется для конфига 
            curl "127.0.0.1:3000/set?id=12345"
            docker volume ls      и с volume ничего не произошло.
            можно использовать когда нужно использовать какойто конфиг 
          
              30 tmpfs - монтирование кусочка файловой системы в памяти. Необходимо для хранения данных вне слоя Docker(обычно приватных)
      - не работает на swarm
      - нельзя шарить между контейнерами
      - Удаляются после остановки контейнера 
  docker run --name volume-6 -d -p 3000:3000 --tmpfs /opt/app/data demo4-1
  curl "127.0.0.1:3000/set?id=12345"
  curl "127.0.0.1:3000/get"
  docker stop volume-6
  docker start volume-6
  curl "127.0.0.1:3000/get"       не будет ни каких данных в контейнере 
  docker run --name volume-7 -d -p 3000:3001 --mount type=tmpfs,destination=/opt/app/data demo4-1       тоже монтирование с помощью тмпфс  

              31 копирование данных без volume
        CP 
      docker run --name volume-0 -d -p 3001:3001 demo4
      curl "127.0.0.1:3001/get"
    curl: (52) Empty reply from server      ?почему то на 3001 не работало? 
      





 

