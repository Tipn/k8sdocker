new file 
hello world 

Command in Linux

rm - R ~                удалить папку 
cp                      скопировать 
mv p1 p2                перемещает переименовывает из р1 в р2 
cat                     показывает сожержание файла 
tail -1 README          выведет последнюю строку в файле 
head -1 README          выведет первую строку
less README             аналог редактора vim 
|                       оператор пайплайна 
grep                    ищит и выводит нужную строку 

                примеры

cat package.json | grep "jest"                  выведет все строки где есть "jest"

find ./apps - name "main.ts"                способ поиска файла в каталоге 

eсho 1                      вывод команды в консоль 
echo 1 > a.txt              значение 1 записать в файл a.txt

diff ./apps/con/src/main.ts ./api/src/mai.ts                выведит разницу между файлами 

df              команда которая позволяет посмотреть заполненость диска !!!

sudo                все права на все 

git clone 
git branch
git pull 
git push

htop                       позволяет смотреть текущие процессы линукса

cd /proc/               папка с процесами в Linux

chroot                  спосб изоляции изминения корневой директории в Linux

ldd                     показывает все зависимости 

Docker container - процесс в namespaces
        Cgroups
        IPC
        Network
        Mount
        PID
        USER
        UTS
        + Docker specifics
Контейнер это НЕ виртуальная машина это изолированный namespaces с дополнительными обвязками Docker в котором запускаются приложения 

Архитектура процессоров должна совпадать
В Docker нет ядра по этому АРМ контейнеры можно запускать только на техже процессорах соответственно X86 на подобных системах  

у docker есть клиент -> к демону и он проверяет наличие ноды локально, не найдя будет скачивать контейнер и все что нужно для node создает image -> сохраняет на хосте 

docker run hello-world                  запустит контейнер 
docker run -it node                     выкачает ноду из регистра 
управление контейнерами: 
        Maagment Comands все сущности:
            builder     Maage builds
            config      Maage Docker config
            container   Maage containers     <--
            context     Maage context
            engine      Maage the docker engine
            image       Maage image
            Network     Maage Network
            node        Maage Swarm nodes
            plugin      Maage plugins
            service     Maage service 
            stack       Maage Docker stack
            swarm       Maage Swarm
            system      Maage trust on Docker image
            volume      Maage volumes 
docker run --name [имя контейнера] -d [detech позволяет форкнуть команду и запустить отдельно] и имедж контейнера 
docker run --name my_mongo -d mongo
docker create --name [имя] [образ]      содаст контейнер
docker ps -a      покажет все контейнеры
docker start [name]
docker stop
docker pause
docker unpouse
docker kill 
docker container prune      удаляет все старые контейнеры которые уже не используются 
docker rename determined_bell mongodb       переименовывать контейнеры 
docker stats        показывает статус контейнера
docker inspect [name]   выводит json где описывается все что есть в контейнере
docker inspect -s [name]
docker inspect -f "{{.State.Status}}" [name]
docker logs [mongodb] | grep "че ищем"      отфильтрует и вывидит искомое
docker logs [mongodb] | grep "че ищем" -A 10     вытащит 10 строк после того что ищем 
docker logs [mongodb] | grep "че ищем" -B 10     вытащит 10 строк перед тем что ищем 
docker logs [mongodb] > test.txt                запишет все логи в файл
docker logs [mongodb] | grep "чет там" > test.txt                запишет чет там из логов в файл

docker exec [параметры] [имя контейнера] [команда]
        -i  -интерактивный вывод        docker exec -it mongodb bash            попадем в контейнер и сможем выполнять команды внутри через bash интерпретатор
        -t  -псевдо tty
        -d  -запуск в фоне
        -e  -переменные окружения       docker exec -e MYVAR=1 mongodb printenv
        -u  -пользователь
        -w  -робочая деректория         docker exec -w /root mongodb pwd       запустит от рута команду pwd

docker exec mongodb mongo --version > mongo.txt                все что после > выполняется на хосте (вне контейнера)
docker exec mongodb bash -c 'mongo --version > mongo2.txt'     так запишем файл в контейнер 

                        
                    Docker IMAGE
            структура image, состоит из слойов причем каждый из слойов тоже image:
                - тонкий слой контейнера    rw
                - 464654654654ыва5          R
                - ывафывафыв465ы4в          R
                - в5а64ыва46аваы64          R
                - ыв45а6фыв4а6ф5ыв          R

sudo du -sh /var/lib/docker/container - disc usage показывает место занятое контейнером на диске

OverlayFS               слои файловой системы

lower -> link -> dif -> marged -> work

                                    Работа с Imege
                                
команды для управления image
    - build 
    - history
    - inspect
    - import
docker image ls -format {{.Tag}}
docker image ls --filter "before=node"          фильтрация по имиджам  
    -  
                    написть свой docker image

dockerfile -инструкция по сборке 
    FROM node:14-alpine as build                Базовый imege
    WORKDIR /opt/app                            Установка робочей деректории
    ADD */fson ./                               добавление файла
    RUN npm install
    RUN npm i webpack                           выполнение команды
    ADD . .
    RUN npm run build api
    RUN npm prune --production                  
    CMD [ "node", "./distr/apps/api/main/js" ]  команда при запуске             
    